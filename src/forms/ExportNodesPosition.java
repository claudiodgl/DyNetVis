/* ***** BEGIN LICENSE BLOCK *****
 *
 * Copyright (c) 2014-2019 Bruno Augusto Nassif Travencolo.
 * All Rights Reserved.
 *
 * This file is part of DyNetVis Project (DyNetVis).
 *
 * How to cite this software:
 *  
@inproceedings{Linhares:2017:DSV:3019612.3019686,
 author = {Linhares, Claudio D. G. and Traven\c{c}olo, Bruno A. N. and Paiva, Jose Gustavo S. and Rocha, Luis E. C.},
 title = {DyNetVis: A System for Visualization of Dynamic Networks},
 booktitle = {Proceedings of the Symposium on Applied Computing},
 series = {SAC '17},
 year = {2017},
 isbn = {978-1-4503-4486-9},
 location = {Marrakech, Morocco},
 pages = {187--194},
 numpages = {8}, 
 url = {http://doi.acm.org/10.1145/3019612.3019686},
 doi = {10.1145/3019612.3019686},
 acmid = {3019686},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {complex networks, dynamic graph visualization, dynamic networks, recurrent neighbors, temporal activity map},
} 
 * 
 * DyNetVis is free software: you can redistribute it and/or modify it under 
 * the terms of the GNU General Public License as published by the Free 
 * Software Foundation, either version 3 of the License, or (at your option) 
 * any later version.
 *
 * DyNetVis is distributed in the hope that it will be useful, but WITHOUT 
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License 
 * for more details.
 *
 * This code was developed by members of Lab of Complex Network Visualization at 
 * Federal University of Uberlândia, Brazil - (https://sites.google.com/view/dynetvis/team?authuser=0). 
 * The initial developer of the original code is Claudio D. G. Linhares <claudiodgl@gmail.com>.
 *
 * Contributor(s): Jean R. Ponciano -- jeanrobertop@gmail.com, Luis E. C. Rocha -- luis.rocha@ugent.be, 
 * José Gustavo S. Paiva -- gustavo@ufu.br, Bruno A. N. Travençolo -- travencolo@gmail.com
 *
 * You should have received a copy of the GNU General Public License along 
 * with DyNetVis. If not, see <http://www.gnu.org/licenses/>.
 *
 * ***** END LICENSE BLOCK ***** */

package forms;

import com.mxgraph.model.mxCell;
import com.mxgraph.model.mxGraphModel;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author Claudio
 */
public class ExportNodesPosition extends javax.swing.JDialog {

    private MainForm frame;
    public ArrayList<String> idsSelecionadosArray = new ArrayList();
    
    /**
     * Creates new form SelectedNodes
     */
    public ExportNodesPosition(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }
    
     public ExportNodesPosition(MainForm f) {
        initComponents();
        setAlwaysOnTop(true);
        frame = f;
        
     }
     
    public void display() {
        this.pack();
        this.setLocation(frame.getWidth()/2 + this.getWidth()/2, frame.getHeight()/2 - this.getHeight()/2);
        this.setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        importNodesPosition = new javax.swing.JButton();
        exportNodesPosition = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Nodes Position");
        setIconImages(null);
        setMaximumSize(null);
        setResizable(false);
        getContentPane().setLayout(new java.awt.FlowLayout());

        jLabel1.setText("Nodes Position:");
        getContentPane().add(jLabel1);

        importNodesPosition.setText("Import");
        importNodesPosition.setRolloverEnabled(false);
        importNodesPosition.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importNodesPositionActionPerformed(evt);
            }
        });
        getContentPane().add(importNodesPosition);

        exportNodesPosition.setText("Export");
        exportNodesPosition.setRolloverEnabled(false);
        exportNodesPosition.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportNodesPositionActionPerformed(evt);
            }
        });
        getContentPane().add(exportNodesPosition);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exportNodesPositionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportNodesPositionActionPerformed
        final JFileChooser openDialog = new JFileChooser();
        
        String filename;
        openDialog.setDialogTitle("Save");
        
        String timeStamp = new SimpleDateFormat("yyyyMMdd_HHmmss").format(Calendar.getInstance().getTime());
        openDialog.setSelectedFile(new File(frame.getPathDataset()+"//"+"nodesPosition_" + timeStamp + ".txt"));
        openDialog.setFileFilter(new FileNameExtensionFilter("txt file","txt"));
       
        int result = openDialog.showSaveDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) 
        {
            filename = openDialog.getSelectedFile().getAbsolutePath();
            if (!filename .endsWith(".txt"))
                filename += ".txt";
            openDialog.setSelectedFile(new File(""));
     
            String conteudoArquivo = "";


            Object[] roots = frame.vv.getGraph().getChildCells(frame.vv.getGraph().getDefaultParent(), true, false);
            for (Object root1 : roots) {
                mxCell cell = (mxCell) root1;

                conteudoArquivo += cell.getId() +" "+cell.getGeometry().getX()+" "+cell.getGeometry().getY()+"\r\n";
            }

            util.FileHandler.gravaArquivo(conteudoArquivo, filename, false);    

            JOptionPane.showMessageDialog(null, "Done.", "Info", 1);

            this.setVisible(false);
            
        }
    }//GEN-LAST:event_exportNodesPositionActionPerformed

    private void importNodesPositionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importNodesPositionActionPerformed

        JFileChooser openDialog = new JFileChooser();
        String filename = "";
        filename = frame.getPathDataset();

        openDialog.resetChoosableFileFilters();
        openDialog.setAcceptAllFileFilterUsed(false);
        openDialog.setFileFilter(new FileNameExtensionFilter("Text files","txt"));
        openDialog.setMultiSelectionEnabled(false);
        openDialog.setDialogTitle("Open file");

        openDialog.setSelectedFile(new File(filename));
        openDialog.setCurrentDirectory(new File(filename));

        int result = openDialog.showOpenDialog(null);
        if (result == JFileChooser.APPROVE_OPTION) {
            filename = openDialog.getSelectedFile().getAbsolutePath();
            ArrayList<ArrayList> coluna = new ArrayList<>();

            BufferedReader file;

            try {
                file = new BufferedReader(new FileReader(filename));
                String line;

                while((line = file.readLine()) != null) {
                    ArrayList<String> linha = new ArrayList();
                    if(!line.equals(("")))
                    {
                        if(!Character.isDigit(line.charAt(0)))
                            continue;
                    }
                    else
                        continue;
                    String[] tokens = line.split(" ");
                    linha.add(tokens[0]); //node id
                    linha.add(tokens[1]); //x
                    linha.add(tokens[2]); //y
                    coluna.add(linha);
                }
                
                frame.vv.getGraph().getModel().beginUpdate(); 
                for(ArrayList<String> linha : coluna)
                { 
                    
                    mxCell cell = (mxCell) ((mxGraphModel)frame.vv.getGraph().getModel()).getCell(linha.get(0));
                    if(cell != null)
                    {
                        Object[] root = {((mxGraphModel)frame.vv.getGraph().getModel()).getCell(linha.get(0))};
                        
                        frame.vv.getGraph().moveCells(root, -cell.getGeometry().getX() , -cell.getGeometry().getY());
                        frame.vv.getGraph().moveCells(root, Double.parseDouble(linha.get(1)) , Double.parseDouble(linha.get(2)));
                    }
                }
                frame.vv.getGraph().getModel().endUpdate(); 
                
                JOptionPane.showMessageDialog(null, "Done.", "Info", 1);

                this.setVisible(false);
               
            } catch (FileNotFoundException ex) {
                System.out.println(ex.getMessage());
            } catch (IOException ex) {
                System.out.println(ex.getMessage());
            }
        }
    }//GEN-LAST:event_importNodesPositionActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ExportNodesPosition.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ExportNodesPosition.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ExportNodesPosition.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ExportNodesPosition.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                ExportNodesPosition dialog = new ExportNodesPosition(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JButton exportNodesPosition;
    public javax.swing.JButton importNodesPosition;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables
}
