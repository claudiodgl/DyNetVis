/* ***** BEGIN LICENSE BLOCK *****
 *
 * Copyright (c) 2014-2019 Bruno Augusto Nassif TravenÃƒÂ§olo.
 * All Rights Reserved.
 *
 * This file is part of DyNetVis Project (DyNetVis).
 *
 * How to cite this software:
 *  
@inproceedings{Linhares:2017:DSV:3019612.3019686,
 author = {Linhares, Claudio D. G. and Traven\c{c}olo, Bruno A. N. and Paiva, Jose Gustavo S. and Rocha, Luis E. C.},
 title = {DyNetVis: A System for Visualization of Dynamic Networks},
 booktitle = {Proceedings of the Symposium on Applied Computing},
 series = {SAC '17},
 year = {2017},
 isbn = {978-1-4503-4486-9},
 location = {Marrakech, Morocco},
 pages = {187--194},
 numpages = {8},
 url = {http://doi.acm.org/10.1145/3019612.3019686},
 doi = {10.1145/3019612.3019686},
 acmid = {3019686},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {complex networks, dynamic graph visualization, dynamic networks, recurrent neighbors, temporal activity map},
} 
 *  
 * DyNetVis is free software: you can redistribute it and/or modify it under 
 * the terms of the GNU General Public License as published by the Free 
 * Software Foundation, either version 3 of the License, or (at your option) 
 * any later version.
 *
 * DyNetVis is distributed in the hope that it will be useful, but WITHOUT 
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License 
 * for more details.
 *
 * This code was developed by members of Lab of Complex Network Visualization at 
 * Federal University of UberlÃƒÂ¢ndia, Brazil - (https://sites.google.com/view/dynetvis/team?authuser=0). 
 * The initial developer of the original code is Claudio D. G. Linhares <claudiodgl@gmail.com>.
 *
 * Contributor(s): Jean R. Ponciano -- jeanrobertop@gmail.com, Luis E. C. Rocha -- luis.rocha@ugent.be, 
 * JosÃƒÂ© Gustavo S. Paiva -- gustavo@ufu.br, Bruno A. N. TravenÃƒÂ§olo -- travencolo@gmail.com
 *
 * You should have received a copy of the GNU General Public License along 
 * with DyNetVis. If not, see <http://www.gnu.org/licenses/>.
 *
 * ***** END LICENSE BLOCK ***** */
package forms;

import com.mxgraph.canvas.mxGraphics2DCanvas;
import com.mxgraph.canvas.mxICanvas;
import com.mxgraph.canvas.mxSvgCanvas;
import com.mxgraph.swing.mxGraphComponent;
import com.mxgraph.util.mxCellRenderer;
import com.mxgraph.util.mxCellRenderer.CanvasFactory;
import com.mxgraph.util.mxDomUtils;
import com.mxgraph.util.mxRectangle;
import com.mxgraph.util.mxUtils;
import com.mxgraph.util.mxXmlUtils;
import com.mxgraph.view.mxGraph;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.awt.Toolkit;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.BorderFactory;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JProgressBar;
import javax.swing.border.Border;
import javax.swing.text.Document;

public class ExportImg extends JDialog {
    
    public JDialog  f;
    public JProgressBar progressBar;
    public mxGraphComponent graph;
    boolean isTemporal;
    public MainForm t;
    public String filename;
    
    public ExportImg(MainForm t) {
        
        super(t);
            
        initComponents();
        this.setModal(true);
        this.frame = t;
        
        f = new JDialog();
        f.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
        Container content = f.getContentPane();
        progressBar = new JProgressBar();
        progressBar.setValue(0);
        progressBar.setStringPainted(true);
        Border border = BorderFactory.createTitledBorder("Saving...");
        progressBar.setBorder(border);
        content.add(progressBar, BorderLayout.NORTH);
        f.setSize(300, 100);
        f.setModal(true);
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        f.setResizable(false);
        f.setLocationRelativeTo(this);
        f.setVisible(false);
        
        this.t = t;
        
        
        String filename = "";
        
        this.filename = filename;
        
        
    }
    
     public ExportImg(mxGraphComponent graphS)
     {
         graph = graphS;
     }
    
    public String text, urlFile;

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        property = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        scaleTextField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        background = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        pointsButton = new javax.swing.JButton();
        cancelButton1 = new javax.swing.JButton();

        setTitle("Export Image");
        setBackground(new java.awt.Color(204, 204, 204));
        setMinimumSize(new java.awt.Dimension(280, 230));
        setModal(true);
        setPreferredSize(new java.awt.Dimension(250, 230));
        setResizable(false);
        getContentPane().setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 5, 10));

        property.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        property.setToolTipText("");
        property.setMinimumSize(new java.awt.Dimension(220, 80));
        property.setPreferredSize(new java.awt.Dimension(210, 120));
        property.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 10, 10));

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel1.setText("Select Format:");
        jLabel1.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        jLabel1.setMaximumSize(new java.awt.Dimension(80, 14));
        jLabel1.setMinimumSize(new java.awt.Dimension(80, 14));
        jLabel1.setPreferredSize(new java.awt.Dimension(90, 14));
        jLabel1.setRequestFocusEnabled(false);
        property.add(jLabel1);

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "PNG", "JPG", "GIF", "SVG" }));
        jComboBox1.setPreferredSize(new java.awt.Dimension(80, 20));
        property.add(jComboBox1);

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("Select Quality:");
        jLabel2.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        jLabel2.setMaximumSize(new java.awt.Dimension(80, 14));
        jLabel2.setMinimumSize(new java.awt.Dimension(80, 14));
        jLabel2.setPreferredSize(new java.awt.Dimension(90, 14));
        property.add(jLabel2);

        scaleTextField.setText("1");
        scaleTextField.setPreferredSize(new java.awt.Dimension(80, 23));
        property.add(scaleTextField);

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setText("Back. Color:");
        jLabel3.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        jLabel3.setMaximumSize(new java.awt.Dimension(80, 14));
        jLabel3.setMinimumSize(new java.awt.Dimension(80, 14));
        jLabel3.setPreferredSize(new java.awt.Dimension(90, 14));
        property.add(jLabel3);

        background.setText(" ");
        background.setMaximumSize(new java.awt.Dimension(80, 23));
        background.setMinimumSize(new java.awt.Dimension(80, 23));
        background.setPreferredSize(new java.awt.Dimension(80, 23));
        background.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backgroundActionPerformed(evt);
            }
        });
        property.add(background);

        getContentPane().add(property);
        property.getAccessibleContext().setAccessibleName("Property");

        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel1.setMinimumSize(new java.awt.Dimension(210, 37));
        jPanel1.setPreferredSize(new java.awt.Dimension(210, 40));

        pointsButton.setText("Save");
        pointsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pointsButtonActionPerformed(evt);
            }
        });
        jPanel1.add(pointsButton);

        cancelButton1.setText("Cancel");
        cancelButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(cancelButton1);

        getContentPane().add(jPanel1);
    }// </editor-fold>//GEN-END:initComponents

    private void pointsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pointsButtonActionPerformed
        
        if(isTemporal)
            graph = t.estruturaGraphInline;
        else if(isCentrality)
            graph = t.vvCentrality;
        else if(isMatrix)
            graph = t.vvMatrix;
        else if(isCommunity)
            graph = t.vvCommunity;
        else
            graph = t.vv;
        
        /*
        if(isTemporal)
            background.setBackground(t.estruturaGraphInline.getBackground());
        else
            background.setBackground(t.vv.getBackground());
        */
        
        
        String timeStamp = new SimpleDateFormat("yyyyMMdd_HHmmss").format(Calendar.getInstance().getTime());
        
        filename = timeStamp;
        
        
        String filenameTemp = filename;
        
        if(isTemporal)
            filenameTemp = "temporal_" + filenameTemp;
        else if(isStream)
            filenameTemp = "stream_" + filenameTemp;
        else if(isMatrix)
            filenameTemp = "matrix_" + filenameTemp;
        else if(isCommunity)
            filenameTemp = "community_layout";
        else
            filenameTemp = "structural_" + filenameTemp;
        
        String formatSelect = jComboBox1.getSelectedItem().toString();
        String nameFile =  t.getTitle();
        
        String[] parts = nameFile.split("\\\\");
        String a = parts[parts.length-1];
        String[] aa = a.split("\\.");
        aa[0] = aa[0].replaceAll(":","");
        filenameTemp = aa[0] + "_" + filenameTemp+"."+formatSelect;
        
        final JFileChooser openDialog = new JFileChooser();
        
        openDialog.setDialogTitle("Save");
        
        openDialog.setSelectedFile(new File(t.getPathDataset()+"//"+filenameTemp));
        openDialog.setCurrentDirectory(new File(filenameTemp));
       
        int result = openDialog.showSaveDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            filenameTemp = openDialog.getSelectedFile().getAbsolutePath();
            urlFile = filenameTemp;

            openDialog.setSelectedFile(new File(""));
            

            //progressBar.setValue(0);

            long tempoInicio = System.currentTimeMillis();
            long tempoAlgoritmo = System.currentTimeMillis();

            double scale = Double.parseDouble(scaleTextField.getText());
            
            
            
            //progressBar.setValue(50);


            try {
                BufferedImage image = mxCellRenderer.createBufferedImage(graph.getGraph(), null, scale, background.getBackground(), true, null);
                formatSelect = jComboBox1.getSelectedItem().toString();
                
                if(formatSelect.equals("SVG"))
                {
                    
                    createSVG(graph.getGraph(),urlFile);
                   
                }
                else{
                    //progressBar.setValue(99);
                    ImageIO.write(image, formatSelect, new File(urlFile));
                }
                //f.setVisible(false);
                JOptionPane.showMessageDialog(null, "Done.", "Info", 1);

            } catch (NegativeArraySizeException ex) {
                JOptionPane.showMessageDialog(null, "Error java heap space.", "Error", 0);
                f.setVisible(false);
                Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, "Error.", "Error", 0);
                Logger.getLogger(ExportImg.class.getName()).log(Level.SEVERE, null, ex);
            }

            dispose();
            //f.setVisible(true);

            
            background.setBackground(Color.WHITE);
        
            
        }
    }//GEN-LAST:event_pointsButtonActionPerformed

    public void createSVG(mxGraph g, String filename) {
        
        mxSvgCanvas canvas = (mxSvgCanvas) mxCellRenderer.drawCells(
          g, null, 1, null, new CanvasFactory() {
          public mxICanvas createCanvas(int width, int height) {
              mxSvgCanvas canvas = new mxSvgCanvas(mxDomUtils
                  .createSvgDocument(width, height));
                  canvas.setEmbedded(true);
                  return canvas;
              } 
          });
        try {
          mxUtils.writeFile(mxXmlUtils.getXml(canvas.getDocument()), filename);
        } catch (IOException e) {
          e.printStackTrace();
        } 
    }
    
    public void exportImgAutomaticallyInStream(mxGraph grafo, String diretorio, String arquivo, String qualLayout)
    {
        //graph = t.graphComponentS;
        String filenameEstrutural = diretorio + "Estrutural_stream_" + arquivo + ".png";
        String filenameTemporal = diretorio + "Temporal_stream_" + arquivo + ".png";

        
        try {
            if(qualLayout.equals("estruturalStream"))
            {
                BufferedImage image = mxCellRenderer.createBufferedImage(grafo, null, 1, Color.WHITE, true, null);
                ImageIO.write(image, "PNG", new File(filenameEstrutural));
            }
            else if(qualLayout.equals("temporalStream"))
            {
                BufferedImage image = mxCellRenderer.createBufferedImage(grafo, null, 1, Color.WHITE, true, null);
                ImageIO.write(image, "PNG", new File(filenameTemporal));
            }
                

            } catch (NegativeArraySizeException ex) {
                JOptionPane.showMessageDialog(null, "Error java heap space.", "Error", 0);
                Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, "Error.", "Error", 0);
                Logger.getLogger(ExportImg.class.getName()).log(Level.SEVERE, null, ex);
            }
    }
    
    
    
    private void backgroundActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backgroundActionPerformed
        
        java.awt.Color color = javax.swing.JColorChooser.showDialog(this, "Choose the Backgroud Color", java.awt.Color.WHITE);
        if (color != null) {
            background.setBackground(color);
        }

        
    }//GEN-LAST:event_backgroundActionPerformed

    private void cancelButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButton1ActionPerformed
        setVisible(false);
    }//GEN-LAST:event_cancelButton1ActionPerformed
    
    public static ExportImg getInstance(MainForm t) {
        if (instance == null || instance.getParent() != t) {
            instance = new ExportImg(t);
        }
        return instance;
    }

    public void display() {
        this.pack();
        this.setLocationRelativeTo(this.getParent());
        if(isTemporal)
        {
            background.setBackground(t.estruturaGraphInline.getViewport().getBackground());
            this.setTitle("Export Temporal Image");
        }       
        else if(isCentrality)
        {
            background.setBackground(t.vvCentrality.getViewport().getBackground());
            this.setTitle("Export Centrality Image");
        }
        else if(isMatrix)
        {
            background.setBackground(t.vvMatrix.getViewport().getBackground());
            this.setTitle("Export Matrix Image");
        }
        else if(isCommunity)
        {
            background.setBackground(t.vvCommunity.getViewport().getBackground());
            this.setTitle("Export Community Image");
        }
        else
        {
            background.setBackground(t.vv.getViewport().getBackground());
            this.setTitle("Export Structural Image");
        }
        
        this.setVisible(true);
    }
    
    

    public boolean isCentrality,isCommunity, isStream, isRobot,isMatrix;
    private static ExportImg instance;
    private MainForm frame;
    private String pathLabelList;
    public String lastPath;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton background;
    public javax.swing.JButton cancelButton1;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    public javax.swing.JButton pointsButton;
    private javax.swing.JPanel property;
    private javax.swing.JTextField scaleTextField;
    // End of variables declaration//GEN-END:variables

    /**
     * @return the pointsTextField
     */


}
