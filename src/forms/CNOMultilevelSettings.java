/* ***** BEGIN LICENSE BLOCK *****
 *
 * Copyright (c) 2014-2019 Bruno Augusto Nassif Travencolo.
 * All Rights Reserved.
 *
 * This file is part of DyNetVis Project (DyNetVis).
 *
 * How to cite this software:
 *  
@inproceedings{Linhares:2017:DSV:3019612.3019686,
 author = {Linhares, Claudio D. G. and Traven\c{c}olo, Bruno A. N. and Paiva, Jose Gustavo S. and Rocha, Luis E. C.},
 title = {DyNetVis: A System for Visualization of Dynamic Networks},
 booktitle = {Proceedings of the Symposium on Applied Computing},
 series = {SAC '17},
 year = {2017},
 isbn = {978-1-4503-4486-9},
 location = {Marrakech, Morocco},
 pages = {187--194},
 numpages = {8},
 url = {http://doi.acm.org/10.1145/3019612.3019686},
 doi = {10.1145/3019612.3019686},
 acmid = {3019686},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {complex networks, dynamic graph visualization, dynamic networks, recurrent neighbors, temporal activity map},
} 
 *  
 * DyNetVis is free software: you can redistribute it and/or modify it under 
 * the terms of the GNU General Public License as published by the Free 
 * Software Foundation, either version 3 of the License, or (at your option) 
 * any later version.
 *
 * DyNetVis is distributed in the hope that it will be useful, but WITHOUT 
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License 
 * for more details.
 *
 * This code was developed by members of Lab of Complex Network Visualization at 
 * Federal University of Uberlândia, Brazil - (https://sites.google.com/view/dynetvis/team?authuser=0). 
 * The initial developer of the original code is Claudio D. G. Linhares <claudiodgl@gmail.com>.
 *
 * Contributor(s): Jean R. Ponciano -- jeanrobertop@gmail.com, Luis E. C. Rocha -- luis.rocha@ugent.be, 
 * José Gustavo S. Paiva -- gustavo@ufu.br, Bruno A. N. Travençolo -- travencolo@gmail.com
 *
 * You should have received a copy of the GNU General Public License along 
 * with DyNetVis. If not, see <http://www.gnu.org/licenses/>.
 *
 * ***** END LICENSE BLOCK ***** */

package forms;

import java.awt.BorderLayout;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.io.File;
import javax.swing.BorderFactory;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JProgressBar;
import javax.swing.border.Border;


/**
 *
 * @author Claudio Linhares
 */
public class CNOMultilevelSettings extends JDialog {
    
    public JDialog  f;
    public JProgressBar progressBar;
    
    public CNOMultilevelSettings(MainForm t) {
        
        super(t);
            
        initComponents();
        this.setModal(true);
        this.frame = t;
        
        f = new JDialog();
        f.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
        Container content = f.getContentPane();
        
        this.f.getRootPane().setOpaque(false);
        this.f.getContentPane().setBackground(t.strong);
        this.f.setBackground(t.strong);
        
        progressBar = new JProgressBar();
        progressBar.setValue(0);
        progressBar.setStringPainted(true);
        Border border = BorderFactory.createTitledBorder("Reading...");
        progressBar.setBorder(border);
        content.add(progressBar, BorderLayout.NORTH);
        f.setSize(300, 100);
        f.setModal(true);
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        f.setResizable(false);
        f.setLocationRelativeTo(this);
        f.setVisible(false);
        
    }
    
    public String text, urlFile;

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel7 = new javax.swing.JLabel();
        sourcePanel1 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        orderSelectedComboBox = new javax.swing.JComboBox<>();
        jLabel8 = new javax.swing.JLabel();
        interCommunityComboBox = new javax.swing.JComboBox<>();
        jLabel9 = new javax.swing.JLabel();
        intraCommunityComboBox = new javax.swing.JComboBox<>();
        blankSpaceCommunitiesCheckBox = new javax.swing.JCheckBox();
        sourcePanel2 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        cnoLimitLevels = new javax.swing.JSpinner();
        limitMaximumCNOLevels = new javax.swing.JCheckBox();
        openFileCheckBox = new javax.swing.JCheckBox();
        saveFileCheckBox = new javax.swing.JCheckBox();
        sourcePanel = new javax.swing.JPanel();
        selectLabel = new javax.swing.JLabel();
        directoryTextField = new javax.swing.JTextField();
        searchButton = new javax.swing.JButton();
        sourcePanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jCheckBox2 = new javax.swing.JCheckBox();
        jCheckBox3 = new javax.swing.JCheckBox();
        jCheckBox4 = new javax.swing.JCheckBox();
        OKButton1 = new javax.swing.JButton();
        cancelButton1 = new javax.swing.JButton();

        setMinimumSize(new java.awt.Dimension(500, 400));
        setPreferredSize(new java.awt.Dimension(500, 420));
        setResizable(false);
        setSize(new java.awt.Dimension(500, 390));
        getContentPane().setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 5, 10));

        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel7.setText("Hierarchical CNO Settings");
        jLabel7.setToolTipText("");
        jLabel7.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        jLabel7.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        getContentPane().add(jLabel7);

        sourcePanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        sourcePanel1.setPreferredSize(new java.awt.Dimension(450, 120));

        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel6.setText("Commun. Detection Algorithm:                             ");
        jLabel6.setToolTipText("");
        jLabel6.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        sourcePanel1.add(jLabel6);
        jLabel6.getAccessibleContext().setAccessibleName("Commun. Detection Algorithm:");

        orderSelectedComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Louvain", "Infomap" }));
        orderSelectedComboBox.setMinimumSize(new java.awt.Dimension(124, 20));
        orderSelectedComboBox.setPreferredSize(new java.awt.Dimension(124, 20));
        sourcePanel1.add(orderSelectedComboBox);

        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel8.setText("Inter-Community Reordering:                              ");
        jLabel8.setToolTipText("");
        jLabel8.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        sourcePanel1.add(jLabel8);

        interCommunityComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Degree", "Recurrent Neighbors" }));
        sourcePanel1.add(interCommunityComboBox);

        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel9.setText("Intra-Community Reordering:                              ");
        jLabel9.setToolTipText("");
        jLabel9.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        sourcePanel1.add(jLabel9);

        intraCommunityComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Degree", "Recurrent Neighbors" }));
        sourcePanel1.add(intraCommunityComboBox);

        blankSpaceCommunitiesCheckBox.setText("Add blank space between communities");
        blankSpaceCommunitiesCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                blankSpaceCommunitiesCheckBoxActionPerformed(evt);
            }
        });
        sourcePanel1.add(blankSpaceCommunitiesCheckBox);

        getContentPane().add(sourcePanel1);

        sourcePanel2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        sourcePanel2.setPreferredSize(new java.awt.Dimension(450, 40));

        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel10.setText("CNO Limit Levels:");
        jLabel10.setPreferredSize(new java.awt.Dimension(100, 15));
        sourcePanel2.add(jLabel10);

        cnoLimitLevels.setModel(new javax.swing.SpinnerNumberModel(1, 1, null, 1));
        cnoLimitLevels.setMinimumSize(new java.awt.Dimension(30, 20));
        cnoLimitLevels.setPreferredSize(new java.awt.Dimension(50, 20));
        cnoLimitLevels.setValue(1);
        cnoLimitLevels.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                cnoLimitLevelsStateChanged(evt);
            }
        });
        sourcePanel2.add(cnoLimitLevels);

        limitMaximumCNOLevels.setText("Maximum");
        limitMaximumCNOLevels.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        limitMaximumCNOLevels.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                limitMaximumCNOLevelsActionPerformed(evt);
            }
        });
        sourcePanel2.add(limitMaximumCNOLevels);

        getContentPane().add(sourcePanel2);

        openFileCheckBox.setText("Open File");
        openFileCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openFileCheckBoxActionPerformed(evt);
            }
        });
        getContentPane().add(openFileCheckBox);

        saveFileCheckBox.setText("Save File");
        saveFileCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveFileCheckBoxActionPerformed(evt);
            }
        });
        getContentPane().add(saveFileCheckBox);

        sourcePanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        sourcePanel.setPreferredSize(new java.awt.Dimension(450, 40));

        selectLabel.setText("Select:");
        selectLabel.setEnabled(false);
        sourcePanel.add(selectLabel);

        directoryTextField.setEnabled(false);
        directoryTextField.setPreferredSize(new java.awt.Dimension(280, 20));
        sourcePanel.add(directoryTextField);

        searchButton.setText("Search...");
        searchButton.setEnabled(false);
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });
        sourcePanel.add(searchButton);

        getContentPane().add(sourcePanel);

        sourcePanel3.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        sourcePanel3.setPreferredSize(new java.awt.Dimension(450, 40));

        jLabel2.setText("Statistic:");
        jLabel2.setEnabled(false);
        sourcePanel3.add(jLabel2);

        jCheckBox2.setText("F-Measure");
        jCheckBox2.setEnabled(false);
        jCheckBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox2ActionPerformed(evt);
            }
        });
        sourcePanel3.add(jCheckBox2);

        jCheckBox3.setText("Matrix");
        jCheckBox3.setEnabled(false);
        sourcePanel3.add(jCheckBox3);

        jCheckBox4.setText("Taxonomy");
        jCheckBox4.setEnabled(false);
        sourcePanel3.add(jCheckBox4);

        getContentPane().add(sourcePanel3);

        OKButton1.setText("OK");
        OKButton1.setMaximumSize(new java.awt.Dimension(65, 23));
        OKButton1.setMinimumSize(new java.awt.Dimension(65, 23));
        OKButton1.setPreferredSize(new java.awt.Dimension(65, 23));
        OKButton1.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        OKButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OKButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(OKButton1);

        cancelButton1.setText("Cancel");
        cancelButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(cancelButton1);
    }// </editor-fold>//GEN-END:initComponents

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        
        JFileChooser openDialog = new JFileChooser();
        String filename = "";
        filename = this.frame.getPathDataset();
        
        openDialog.resetChoosableFileFilters();
        openDialog.setAcceptAllFileFilterUsed(false);
        //openDialog.setFileFilter(new DATFilter());
        openDialog.setMultiSelectionEnabled(false);
        if(openFileCheckBox.isSelected())
        {
            openDialog.setDialogTitle("Open file");
            openDialog.setSelectedFile(new File(filename));
            if(this.lastPath != null){
                filename = this.lastPath;
            }
            openDialog.setCurrentDirectory(new File(filename));
            int result = openDialog.showOpenDialog(this);
            if (result == JFileChooser.APPROVE_OPTION) {
                filename = openDialog.getSelectedFile().getAbsolutePath();
                urlFile = filename;
                this.lastPath = openDialog.getSelectedFile().getParent();
                this.getPointsTextField().setText(filename);
                openDialog.setSelectedFile(new File(""));
            }
        }
        else if(saveFileCheckBox.isSelected())
        {
            openDialog.setDialogTitle("Select Directory");
            openDialog.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            if(this.lastPath != null){
                filename = this.lastPath;
            }
            openDialog.setCurrentDirectory(new File(filename));
            int result = openDialog.showOpenDialog(this);
            if (result == JFileChooser.APPROVE_OPTION) {
                filename = openDialog.getSelectedFile().getAbsolutePath();
                urlFile = filename;
                this.lastPath = openDialog.getSelectedFile().getParent();
                
                this.getPointsTextField().setText(filename);
                openDialog.setSelectedFile(new File(""));
            }
        }
        else
        {
            this.lastPath = null;
        }
        
        
        
       
        
    }//GEN-LAST:event_searchButtonActionPerformed

    private void OKButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OKButton1ActionPerformed
          						
        if(openFileCheckBox.isSelected() || saveFileCheckBox.isSelected())
        {
            if(getPointsTextField().getText().trim().length() == 0)
            {
              JOptionPane.showMessageDialog(null, "A file/directory must be selected.", "Error", 0);
              return;
            }
            
        }
        
        frame.getNetInline().blankSpaceCommunities = blankSpaceCommunitiesCheckBox.isSelected();
        
        if(orderSelectedComboBox.getSelectedItem().toString().equals("Louvain"))
            frame.getNetInline().communityDetectionAlgorithm = "Original Louvain";
        else
            frame.getNetInline().communityDetectionAlgorithm = orderSelectedComboBox.getSelectedItem().toString();
        
        frame.getNetInline().interCommunityReorderingAlgorithm = interCommunityComboBox.getSelectedItem().toString();
        frame.getNetInline().intraCommunityReorderingAlgorithm = intraCommunityComboBox.getSelectedItem().toString();
        if(limitMaximumCNOLevels.isSelected())
            frame.getNetInline().qtosNiveisCNOUsuarioQuer = -1;
        else
            frame.getNetInline().qtosNiveisCNOUsuarioQuer = Integer.parseInt(cnoLimitLevels.getValue().toString());
        if(saveFileCheckBox.isSelected())
        {
            frame.getNetInline().imprimirTxtComunidadesROCMultilevel = true;
            frame.getNetInline().txtComunidadesROCMultilevel = getPointsTextField().getText() + "//CNO_"+frame.getNetInline().communityDetectionAlgorithm+"_"+frame.nameFile+"_Res"+frame.numberNetworkResolution+"_MaxLevel_"+(limitMaximumCNOLevels.isSelected() ? "max" : cnoLimitLevels.getValue().toString())+".txt";
            if(new File(frame.getNetInline().txtComunidadesROCMultilevel).exists())
            {
                JOptionPane.showMessageDialog(null, "This file already exists.", "Error", 0);
                return;
            }
        }
        else
            frame.getNetInline().imprimirTxtComunidadesROCMultilevel = false;

        if(openFileCheckBox.isSelected())
        {
            frame.getNetInline().openFileCNO = true;
            frame.getNetInline().pathFileCNO = getPointsTextField().getText();
        }

        frame.getNetInline().orderNodesInline("CNO", frame.getNetLayout().graphComponent);
        //frame.setEdgeTemporalStatistic();

        f.setVisible(false);
        dispose();



    }//GEN-LAST:event_OKButton1ActionPerformed

    
    private void cancelButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButton1ActionPerformed
        setVisible(false);
    }//GEN-LAST:event_cancelButton1ActionPerformed

    private void cnoLimitLevelsStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_cnoLimitLevelsStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_cnoLimitLevelsStateChanged

    private void jCheckBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBox2ActionPerformed

    private void openFileCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openFileCheckBoxActionPerformed
        saveFileCheckBox.setSelected(false);
        directoryTextField.setText("");
        if(openFileCheckBox.isSelected())
        {
            selectLabel.setEnabled(true);
            directoryTextField.setEnabled(true);
            searchButton.setEnabled(true);
        }
        else
        {
            selectLabel.setEnabled(false);
            directoryTextField.setEnabled(false);
            searchButton.setEnabled(false);
        }
    }//GEN-LAST:event_openFileCheckBoxActionPerformed

    private void saveFileCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveFileCheckBoxActionPerformed
        openFileCheckBox.setSelected(false);
        directoryTextField.setText("");
        if(saveFileCheckBox.isSelected())
        {
            selectLabel.setEnabled(true);
            directoryTextField.setEnabled(true);
            searchButton.setEnabled(true);
        }
        else
        {
            selectLabel.setEnabled(false);
            directoryTextField.setEnabled(false);
            searchButton.setEnabled(false);
        }
    }//GEN-LAST:event_saveFileCheckBoxActionPerformed

    private void limitMaximumCNOLevelsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_limitMaximumCNOLevelsActionPerformed
        if(limitMaximumCNOLevels.isSelected())
        {
            cnoLimitLevels.setEnabled(false);
        }
        else
        {
            cnoLimitLevels.setEnabled(true);
        }
    }//GEN-LAST:event_limitMaximumCNOLevelsActionPerformed

    private void blankSpaceCommunitiesCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_blankSpaceCommunitiesCheckBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_blankSpaceCommunitiesCheckBoxActionPerformed
    
    public static CNOMultilevelSettings getInstance(MainForm t) {
        if (instance == null || instance.getParent() != t) {
            instance = new CNOMultilevelSettings(t);
            
        }
        return instance;
    }

    public void display() {
        this.pack();
        this.setLocationRelativeTo(this.getParent());
        this.setVisible(true);
    }

    private static CNOMultilevelSettings instance;
    private MainForm frame;
    public String lastPath;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JButton OKButton1;
    private javax.swing.JCheckBox blankSpaceCommunitiesCheckBox;
    public javax.swing.JButton cancelButton1;
    private javax.swing.JSpinner cnoLimitLevels;
    public javax.swing.JTextField directoryTextField;
    private javax.swing.JComboBox<String> interCommunityComboBox;
    private javax.swing.JComboBox<String> intraCommunityComboBox;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JCheckBox jCheckBox3;
    private javax.swing.JCheckBox jCheckBox4;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JCheckBox limitMaximumCNOLevels;
    private javax.swing.JCheckBox openFileCheckBox;
    private javax.swing.JComboBox<String> orderSelectedComboBox;
    private javax.swing.JCheckBox saveFileCheckBox;
    public javax.swing.JButton searchButton;
    private javax.swing.JLabel selectLabel;
    public javax.swing.JPanel sourcePanel;
    public javax.swing.JPanel sourcePanel1;
    public javax.swing.JPanel sourcePanel2;
    public javax.swing.JPanel sourcePanel3;
    // End of variables declaration//GEN-END:variables

    /**
     * @return the pointsTextField
     */
    public javax.swing.JTextField getPointsTextField() {
        return directoryTextField;
    }

}
