/* ***** BEGIN LICENSE BLOCK *****
 *
 * Copyright (c) 2014-2019 Bruno Augusto Nassif Travencolo.
 * All Rights Reserved.
 *
 * This file is part of DyNetVis Project (DyNetVis).
 *
 * How to cite this software:
 *  
@inproceedings{Linhares:2017:DSV:3019612.3019686,
 author = {Linhares, Claudio D. G. and Traven\c{c}olo, Bruno A. N. and Paiva, Jose Gustavo S. and Rocha, Luis E. C.},
 title = {DyNetVis: A System for Visualization of Dynamic Networks},
 booktitle = {Proceedings of the Symposium on Applied Computing},
 series = {SAC '17},
 year = {2017},
 isbn = {978-1-4503-4486-9},
 location = {Marrakech, Morocco},
 pages = {187--194},
 numpages = {8},
 url = {http://doi.acm.org/10.1145/3019612.3019686},
 doi = {10.1145/3019612.3019686},
 acmid = {3019686},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {complex networks, dynamic graph visualization, dynamic networks, recurrent neighbors, temporal activity map},
} 
 *  
 * DyNetVis is free software: you can redistribute it and/or modify it under 
 * the terms of the GNU General Public License as published by the Free 
 * Software Foundation, either version 3 of the License, or (at your option) 
 * any later version.
 *
 * DyNetVis is distributed in the hope that it will be useful, but WITHOUT 
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License 
 * for more details.
 *
 * This code was developed by members of Lab of Complex Network Visualization at 
 * Federal University of Uberlândia, Brazil - (https://sites.google.com/view/dynetvis/team?authuser=0). 
 * The initial developer of the original code is Claudio D. G. Linhares <claudiodgl@gmail.com>.
 *
 * Contributor(s): Jean R. Ponciano -- jeanrobertop@gmail.com, Luis E. C. Rocha -- luis.rocha@ugent.be, 
 * José Gustavo S. Paiva -- gustavo@ufu.br, Bruno A. N. Travençolo -- travencolo@gmail.com
 *
 * You should have received a copy of the GNU General Public License along 
 * with DyNetVis. If not, see <http://www.gnu.org/licenses/>.
 *
 * ***** END LICENSE BLOCK ***** */

package forms;

import com.mxgraph.model.mxCell;
import java.io.File;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author Jean
 */
public class SelectedNodes extends javax.swing.JDialog {

    /**
     * @return the roots
     */
    public Object[] getRoots() {
        return roots;
    }

    /**
     * @param roots the roots to set
     */
    public void setRoots(Object[] roots) {
        this.roots = roots;
    }

    private MainForm frame;
    private Object[] roots;
    public ArrayList<String> idsSelecionadosArray = new ArrayList();
    
    /**
     * Creates new form SelectedNodes
     */
    public SelectedNodes(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }
    
     public SelectedNodes(MainForm f) {
        initComponents();
        setAlwaysOnTop(true);
        frame = f;
        
     }
     
    public void display() {
        this.pack();
        this.setLocation(frame.getWidth()/2 + this.getWidth()/2, frame.getHeight()/2 - this.getHeight()/2);
        this.setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        selectedNodes = new javax.swing.JTextArea();
        exportIds = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        countSelectedNodes = new javax.swing.JTextPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Selected Nodes");
        setIconImages(null);

        selectedNodes.setEditable(false);
        selectedNodes.setColumns(20);
        selectedNodes.setLineWrap(true);
        selectedNodes.setRows(5);
        selectedNodes.setWrapStyleWord(true);
        jScrollPane1.setViewportView(selectedNodes);

        exportIds.setText("Export IDs");
        exportIds.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportIdsActionPerformed(evt);
            }
        });

        jLabel1.setText("#Selected Nodes: ");

        countSelectedNodes.setEditable(false);
        jScrollPane2.setViewportView(countSelectedNodes);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(exportIds, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(41, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 274, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(4, 4, 4)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(39, 39, 39)
                        .addComponent(exportIds)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exportIdsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportIdsActionPerformed
        final JFileChooser openDialog = new JFileChooser();
        
        String filename;
        openDialog.setDialogTitle("Save");
        
        String timeStamp = new SimpleDateFormat("yyyyMMdd_HHmmss").format(Calendar.getInstance().getTime());
        openDialog.setSelectedFile(new File(frame.getPathDataset()+"//"+"selectedNodes_" + timeStamp + ".txt"));
        openDialog.setFileFilter(new FileNameExtensionFilter("txt file","txt"));
       
        int result = openDialog.showSaveDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) 
        {
            filename = openDialog.getSelectedFile().getAbsolutePath();
            if (!filename .endsWith(".txt"))
                filename += ".txt";
            openDialog.setSelectedFile(new File(""));
            
            //Pega ids selecionados
            String nosTextArea = selectedNodes.getText();
            nosTextArea = nosTextArea.substring(1, nosTextArea.length()-1); //Tira [ e ]
            String[] idsSelecionados = nosTextArea.split(", ");
            idsSelecionadosArray = new ArrayList<String>(Arrays.asList(idsSelecionados));
            
            String conteudoArquivo = "// nodeID;status\tstatus = 1 if node is selected and 0 otherwise.\r\n\r\n";
            String id;
            
            for(Object root1 : roots)
            {
                mxCell cell = (mxCell) root1;
                if(cell.isVertex())
                {
                    String idCell = cell.getValue().toString();
                    if(idsSelecionadosArray.contains(idCell))
                        conteudoArquivo += idCell + ";" + "1\r\n";
                    else
                        conteudoArquivo += idCell + ";" + "0\r\n";
                }
            }
            
            util.FileHandler.gravaArquivo(conteudoArquivo, filename, false);    
            
             JOptionPane.showMessageDialog(null, "Done.", "Info", 1);
        }
    }//GEN-LAST:event_exportIdsActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SelectedNodes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SelectedNodes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SelectedNodes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SelectedNodes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                SelectedNodes dialog = new SelectedNodes(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JTextPane countSelectedNodes;
    public javax.swing.JButton exportIds;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    public javax.swing.JTextArea selectedNodes;
    // End of variables declaration//GEN-END:variables
}
